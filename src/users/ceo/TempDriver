import com.sun.org.apache.xpath.internal.operations.Or;
import javafx.application.Application;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Worker;
import javafx.concurrent.Worker.State;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.CheckBoxListCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import javafx.stage.Stage;
import javafx.util.Callback;

import java.time.LocalDate;

/*w  w  w.j  ava  2s  .c om*/
public class Main extends Application {
    /* "https://www.google.com/maps/dir/" + firstAddress.getAddress() + ",+" + firstAddress.getZipCode() + "+" + firstAddress.getPlace() + ",+Norway/";*/
    public static String generatUrl(ObservableList<Order> ordersToGenerateRoute){
        String url = "https://www.google.com/maps/dir/";
        for (Order order :
                ordersToGenerateRoute) {
            Address address = order.getAddress();
            url += address.getAddress() + ",+" + address.getZipCode() + "+" + address.getPlace() + ",+Norway/";
        }
        return url;
    }

    public static void addMap(String url, Pane pane, Stage stage){
        final WebView browser = new WebView();
        final WebEngine webEngine = browser.getEngine();

        ScrollPane scrollPane = new ScrollPane();
        scrollPane.setContent(browser);

        webEngine.getLoadWorker().stateProperty()
                .addListener(new ChangeListener<State>() {
                    @Override
                    public void changed(ObservableValue ov, State oldState, State newState) {

                        if (newState == Worker.State.SUCCEEDED) {
                            stage.setTitle(webEngine.getLocation());
                        }

                    }
                });
        webEngine.load(url);
        pane.getChildren().add(scrollPane);
    }

    @Override
    public void start(final Stage stage) {


        Pane paneForMap = new Pane();

        Address firstAddress = new Address("Osloveien 54", 7018, "Trondheim");
        Address secondAddress = new Address("Weidemanns vei 5A", 7014, "Trondheim");
        Address thirdAddress = new Address("Kl√¶buveien 134A", 7031, "Trondheim");

        ObservableList<Order> orders = FXCollections.observableArrayList();
        orders.add(new Order(1, "dsf1", LocalDate.now(), LocalDate.now(), 21, "Ready for delivery", firstAddress));
        orders.add(new Order(2, "dsf2", LocalDate.now(), LocalDate.now(), 21, "Ready for delivery", secondAddress));
        orders.add(new Order(3, "dsf3", LocalDate.now(), LocalDate.now(), 21, "Ready for delivery", thirdAddress));


        ObservableList<Order> ordersInDeliveryList = FXCollections.observableArrayList();


        TableView<Order> tableForDelivery = new TableView<Order>();

        tableForDelivery.setEditable(true);

        TableColumn deadline = new TableColumn("Deadline");
        deadline.setCellValueFactory(new PropertyValueFactory<Order, LocalDate>("deadline"));
        TableColumn dateDelivered = new TableColumn("Date delivered");
        dateDelivered.setCellValueFactory(
                new PropertyValueFactory<Order, LocalDate>("actualDeliveryDate")
        );
        TableColumn status = new TableColumn("Status");
        status.setCellValueFactory(
                new PropertyValueFactory<Order, String>("status")
        );
        TableColumn address = new TableColumn("Address");
        address.setCellValueFactory(
                new PropertyValueFactory<Order, Address>("address")
        );
        address.setCellFactory(column -> {
            return new TableCell<Order, Address>() {
                @Override
                protected void updateItem(Address item, boolean empty) {
                    if (item == null || empty) {
                        setText(null);
                    } else {
                        setText(item.getAddress() + "\n" + item.getZipCode() + " " + item.getPlace());
                    }
                }
            };
        });
        tableForDelivery.getColumns().addAll(deadline, dateDelivered, status);
        tableForDelivery.setItems(orders);


        TableView<Order> tableForDelivery2 = new TableView<Order>();

        tableForDelivery2.setEditable(true);

        TableColumn deadline2 = new TableColumn("Deadline");
        deadline2.setCellValueFactory(new PropertyValueFactory<Order, LocalDate>("deadline"));
        TableColumn dateDelivered2 = new TableColumn("Date delivered");
        dateDelivered2.setCellValueFactory(
                new PropertyValueFactory<Order, LocalDate>("actualDeliveryDate")
        );
        TableColumn status2 = new TableColumn("Status");
        status2.setCellValueFactory(
                new PropertyValueFactory<Order, String>("status")
        );
        TableColumn address2 = new TableColumn("Address");
        address2.setCellValueFactory(
                new PropertyValueFactory<Order, Address>("address")
        );
        address2.setCellFactory(column -> {
            return new TableCell<Order, Address>() {
                @Override
                protected void updateItem(Address item, boolean empty) {
                    if (item == null || empty) {
                        setText(null);
                    } else {
                        setText(item.getAddress() + "\n" + item.getZipCode() + " " + item.getPlace());
                    }
                }
            };
        });


        tableForDelivery2.getColumns().addAll(deadline2, dateDelivered2, status2);
        tableForDelivery2.setItems(ordersInDeliveryList);

        Button addToDeliveryRoute = new Button("Add to delivery route");
        Button setToDelivered = new Button("Set to delivered");
        Button setToReadyForDelivery = new Button("Set to \"ready for delivery\"");
        Button removeFromList = new Button("Remove from list");
        Button generateDeliveryRoute = new Button("Generate delivery route");


        addToDeliveryRoute.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Order item = tableForDelivery.getSelectionModel().getSelectedItem();
                if (item != null) {
                    boolean exists = false;
                    for (Order order :
                            ordersInDeliveryList) {
                        if (order == item) {
                            exists = true;
                        }
                    }
                    if (!exists) {
                        ordersInDeliveryList.add(item);
                    }
                }
            }
        });

        removeFromList.setOnAction(new EventHandler<ActionEvent>() {
            public void handle(ActionEvent event) {
                Order item = tableForDelivery2.getSelectionModel().getSelectedItem();
                if (item != null) {
                    tableForDelivery2.getSelectionModel().clearSelection();
                    ordersInDeliveryList.remove(item);
                }
            }
        });
        generateDeliveryRoute.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                String url = generatUrl(ordersInDeliveryList);
                addMap(url, paneForMap, stage);

            }
        });



        StackPane firstStackPane = new StackPane(tableForDelivery);
        StackPane secondStackPane = new StackPane(tableForDelivery2);


        final HBox hBox = new HBox();
        hBox.setSpacing(5);
        hBox.setPadding(new

                Insets(10, 0, 0, 10)

        );
        hBox.getChildren().addAll(tableForDelivery, addToDeliveryRoute, setToDelivered, setToReadyForDelivery, tableForDelivery2, removeFromList, generateDeliveryRoute);



        GridPane myPane = new GridPane();
        myPane.add(hBox, 0, 0);
        myPane.add(paneForMap, 1, 1);










        stage.setWidth(400);
        stage.setHeight(500);
        Scene scene = new Scene(new Group());


        scene.setRoot(myPane);

        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}